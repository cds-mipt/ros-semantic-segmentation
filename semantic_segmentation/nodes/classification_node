#!/usr/bin/env python

import numpy as np
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image

from semantic_segmentation.msg import RoiArray, ObjectArray, Object


def on_image(msg):
    on_image.last_image = msg


def on_roi_array(msg):
    on_roi_array.last_roi_array = msg


on_image.last_image = None
on_roi_array.last_roi_array = None


def roi_to_bbox(roi):
    return int(roi.x_offset), int(roi.y_offset), int(roi.height), int(roi.width)


def crop(img, bbox):
    x, y, w, h = bbox
    return img[y:y + h, x:x + w]


IGNORE_LABELS = [5]


if __name__ == "__main__":
    br = CvBridge()
    rospy.init_node('road_classification_node')

    MODEL = rospy.get_param('~model', 'classifier')
    TOPIC_IMAGE_FLOAT_RGB_LARGE = rospy.get_param('~topic_image', 'image_float_rgb_large')
    TOPIC_TRAFFIC_LIGHT_ROI_ARRAY = rospy.get_param('~traffic_light_roi_array', 'traffic_light_roi_array')
    TOPIC_TRAFFIC_LIGHT_OBJECT_ARRAY = rospy.get_param('~traffic_light_object_array', 'traffic_light_object_array')

    sub_image = rospy.Subscriber(TOPIC_IMAGE_FLOAT_RGB_LARGE, Image, on_image)
    sub_roi_arr = rospy.Subscriber(TOPIC_TRAFFIC_LIGHT_ROI_ARRAY, RoiArray, on_roi_array)
    pub_traffic_sign_object_array = rospy.Publisher(TOPIC_TRAFFIC_LIGHT_OBJECT_ARRAY, ObjectArray, queue_size=1)

    model = getattr(__import__('models', globals(), locals(), fromlist=[MODEL]), MODEL).Model()

    while not rospy.is_shutdown():
        if (on_image.last_image is None or on_roi_array.last_roi_array is None
                or on_image.last_image.header != on_roi_array.last_roi_array.header):
            continue
        last_image = br.imgmsg_to_cv2(on_image.last_image)
        last_roi_array = on_roi_array.last_roi_array
        on_image.last_image = None
        on_roi_array.last_roi_array = None
        if pub_traffic_sign_object_array.get_num_connections() > 0:
            bbox_array = [roi_to_bbox(roi) for roi in last_roi_array.rois]

            objects = []
            if len(bbox_array) > 0:
                crops = [crop(last_image, bbox) for bbox in bbox_array]

                cls_scores = model.infer(crops)
                print(cls_scores)

                for c, roi in zip(np.argmax(cls_scores, axis=1), last_roi_array.rois):
                    if c not in IGNORE_LABELS:
                        objects.append(Object(bbox=roi, label=np.uint8(c)))

            m = ObjectArray(objects=objects)
            pub_traffic_sign_object_array.publish(m)
