#!/usr/bin/env python

import numpy as np
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image


def on_image(msg):
    on_image.last_image = msg


on_image.last_image = None


if __name__ == "__main__":
    br = CvBridge()
    rospy.init_node('road_segmentation_node')

    MODEL = rospy.get_param('~model', 'unetmct')
    TOPIC_IMAGE_RGB_SMALL = rospy.get_param('~topic_image', 'image_float_rgb_small')
    TOPIC_SEMANTIC = rospy.get_param('~topic_semantic', 'semantic')

    sub_image_rgb_small = rospy.Subscriber(TOPIC_IMAGE_RGB_SMALL, Image, on_image)
    pub_semantic = rospy.Publisher(TOPIC_SEMANTIC, Image, queue_size=5)

    model = getattr(__import__('models', globals(), locals(), fromlist=[MODEL]), MODEL).Model()
    rospy.set_param("semantic_categories", model.categories)

    while not rospy.is_shutdown():
        if on_image.last_image is None:
            continue
        last_image = on_image.last_image
        on_image.last_image = None
        if pub_semantic.get_num_connections() > 0:
            img = br.imgmsg_to_cv2(last_image)
            semantic = model.infer([img])[0]
            semantic = np.argmax(semantic, axis=2)
            m = br.cv2_to_imgmsg(semantic.astype(np.uint8), encoding='mono8')
            m.header.stamp = last_image.header.stamp
            pub_semantic.publish(m)
