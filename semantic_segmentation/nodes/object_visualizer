#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, RegionOfInterest
import numpy as np
import cv2
from semantic_segmentation.msg import ObjectArray


LABELS = ['off', "r", "y", "ry", "g"]
N_CLASSES = len(LABELS)


def on_image(msg):
    on_image.last_image = msg


def on_object_array(msg):
    on_object_array.last_object_array = msg


on_image.last_image = None
on_object_array.last_object_array = None


def roi_to_bbox(roi):
    return int(roi.x_offset), int(roi.y_offset), int(roi.height), int(roi.width)


def get_colors():
    idx_to_color = [
        [0, 0, 0],
        [0, 0, 255],
        [0, 255, 255],
        [255, 0, 0],
        [0, 255, 0]
    ]
    return np.array(idx_to_color, dtype=np.uint8)


def draw_objects(image, object_array, idx_to_color):
    for object in object_array.objects:
        color = tuple(map(int, idx_to_color[object.label]))

        x, y, w, h = roi_to_bbox(object.bbox)
        cv2.rectangle(image, (x, y), (x + w, y + h), color, 3)
        cv2.putText(image, LABELS[object.label], (x + w, y), 0, 1, color, 2)
    return image


def main():
    br = CvBridge()
    rospy.init_node('object_visualizer')

    TOPIC_IMAGE = rospy.get_param('~topic_image', 'image_float_rgb_large')
    TOPIC_TRAFFIC_LIGHT_OBJECT_ARRAY = rospy.get_param('~traffic_light_object_array', 'traffic_light_object_array')
    TOPIC_IMAGE_WITH_TRAFFIC_SIGN_OBJECTS = \
        rospy.get_param('~image_with_traffic_sign_objects', 'image_with_traffic_sign_objects')

    idx_to_color = get_colors()

    sub_image = rospy.Subscriber(TOPIC_IMAGE, Image, on_image)
    sub_traffic_sign_object_array = rospy.Subscriber(TOPIC_TRAFFIC_LIGHT_OBJECT_ARRAY, ObjectArray, on_object_array)
    pub_image_objects = rospy.Publisher(TOPIC_IMAGE_WITH_TRAFFIC_SIGN_OBJECTS, Image, queue_size=1)

    while not rospy.is_shutdown():
        if on_image.last_image is None or on_object_array.last_object_array is None:
            continue

        header = on_image.last_image.header
        img = cv2.cvtColor((br.imgmsg_to_cv2(on_image.last_image) * 255).astype(np.uint8), cv2.COLOR_RGB2BGR)
        object_array = on_object_array.last_object_array

        img = draw_objects(img, object_array, idx_to_color)

        if pub_image_objects.get_num_connections() > 0:
            m = br.cv2_to_imgmsg(img.astype(np.uint8))
            m.header.stamp.secs = header.stamp.secs
            m.header.stamp.nsecs = header.stamp.nsecs
            pub_image_objects.publish(m)


if __name__ == "__main__":
    main()
